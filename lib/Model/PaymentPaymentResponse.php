<?php
/**
 * PaymentPaymentResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Pensopay\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Create and manage your Payments
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@pensopay.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pensopay\Client\Model;

use \ArrayAccess;
use \Pensopay\Client\ObjectSerializer;

/**
 * PaymentPaymentResponse Class Doc Comment
 *
 * @category Class
 * @package  Pensopay\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPaymentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payment.PaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'int',
        'amount' => 'int',
        'cardFee' => 'int',
        'autocapture' => 'bool',
        'callbackUrl' => 'string',
        'cancelUrl' => 'string',
        'captured' => 'int',
        'type' => 'string',
        'currency' => 'string',
        'facilitator' => 'string',
        'acquirer' => 'string',
        'id' => 'int',
        'link' => 'string',
        'linkUuid' => 'string',
        'methods' => 'string[]',
        'remoteIp' => 'string',
        'locale' => 'string',
        'order' => '\Pensopay\Client\Model\PaymentPaymentOrder',
        'orderId' => 'string',
        'reference' => 'string',
        'refunded' => 'int',
        'state' => 'string',
        'successUrl' => 'string',
        'testmode' => 'bool',
        'textOnStatement' => 'string',
        'updatedAt' => 'string',
        'createdAt' => 'string',
        'expiresAt' => 'string',
        'mandateId' => 'int',
        'subscriptionId' => 'int',
        'variables' => 'array<string,string>',
        'paymentDetails' => '\Pensopay\Client\Model\PaymentPaymentDetails',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountId' => null,
        'amount' => null,
        'cardFee' => null,
        'autocapture' => null,
        'callbackUrl' => null,
        'cancelUrl' => null,
        'captured' => null,
        'type' => null,
        'currency' => null,
        'facilitator' => null,
        'acquirer' => null,
        'id' => 'int64',
        'link' => null,
        'linkUuid' => null,
        'methods' => null,
        'remoteIp' => null,
        'locale' => null,
        'order' => null,
        'orderId' => null,
        'reference' => null,
        'refunded' => null,
        'state' => null,
        'successUrl' => null,
        'testmode' => null,
        'textOnStatement' => null,
        'updatedAt' => null,
        'createdAt' => null,
        'expiresAt' => null,
        'mandateId' => 'int64',
        'subscriptionId' => 'int64',
        'variables' => null,
        'paymentDetails' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accountId' => false,
        'amount' => false,
        'cardFee' => false,
        'autocapture' => false,
        'callbackUrl' => false,
        'cancelUrl' => false,
        'captured' => false,
        'type' => false,
        'currency' => false,
        'facilitator' => false,
        'acquirer' => false,
        'id' => false,
        'link' => false,
        'linkUuid' => false,
        'methods' => false,
        'remoteIp' => false,
        'locale' => false,
        'order' => false,
        'orderId' => false,
        'reference' => false,
        'refunded' => false,
        'state' => false,
        'successUrl' => false,
        'testmode' => false,
        'textOnStatement' => false,
        'updatedAt' => false,
        'createdAt' => false,
        'expiresAt' => false,
        'mandateId' => false,
        'subscriptionId' => false,
        'variables' => false,
        'paymentDetails' => false,
        'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'amount' => 'amount',
        'cardFee' => 'card_fee',
        'autocapture' => 'autocapture',
        'callbackUrl' => 'callback_url',
        'cancelUrl' => 'cancel_url',
        'captured' => 'captured',
        'type' => 'type',
        'currency' => 'currency',
        'facilitator' => 'facilitator',
        'acquirer' => 'acquirer',
        'id' => 'id',
        'link' => 'link',
        'linkUuid' => 'link_uuid',
        'methods' => 'methods',
        'remoteIp' => 'remote_ip',
        'locale' => 'locale',
        'order' => 'order',
        'orderId' => 'order_id',
        'reference' => 'reference',
        'refunded' => 'refunded',
        'state' => 'state',
        'successUrl' => 'success_url',
        'testmode' => 'testmode',
        'textOnStatement' => 'text_on_statement',
        'updatedAt' => 'updated_at',
        'createdAt' => 'created_at',
        'expiresAt' => 'expires_at',
        'mandateId' => 'mandate_id',
        'subscriptionId' => 'subscription_id',
        'variables' => 'variables',
        'paymentDetails' => 'payment_details',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'amount' => 'setAmount',
        'cardFee' => 'setCardFee',
        'autocapture' => 'setAutocapture',
        'callbackUrl' => 'setCallbackUrl',
        'cancelUrl' => 'setCancelUrl',
        'captured' => 'setCaptured',
        'type' => 'setType',
        'currency' => 'setCurrency',
        'facilitator' => 'setFacilitator',
        'acquirer' => 'setAcquirer',
        'id' => 'setId',
        'link' => 'setLink',
        'linkUuid' => 'setLinkUuid',
        'methods' => 'setMethods',
        'remoteIp' => 'setRemoteIp',
        'locale' => 'setLocale',
        'order' => 'setOrder',
        'orderId' => 'setOrderId',
        'reference' => 'setReference',
        'refunded' => 'setRefunded',
        'state' => 'setState',
        'successUrl' => 'setSuccessUrl',
        'testmode' => 'setTestmode',
        'textOnStatement' => 'setTextOnStatement',
        'updatedAt' => 'setUpdatedAt',
        'createdAt' => 'setCreatedAt',
        'expiresAt' => 'setExpiresAt',
        'mandateId' => 'setMandateId',
        'subscriptionId' => 'setSubscriptionId',
        'variables' => 'setVariables',
        'paymentDetails' => 'setPaymentDetails',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'amount' => 'getAmount',
        'cardFee' => 'getCardFee',
        'autocapture' => 'getAutocapture',
        'callbackUrl' => 'getCallbackUrl',
        'cancelUrl' => 'getCancelUrl',
        'captured' => 'getCaptured',
        'type' => 'getType',
        'currency' => 'getCurrency',
        'facilitator' => 'getFacilitator',
        'acquirer' => 'getAcquirer',
        'id' => 'getId',
        'link' => 'getLink',
        'linkUuid' => 'getLinkUuid',
        'methods' => 'getMethods',
        'remoteIp' => 'getRemoteIp',
        'locale' => 'getLocale',
        'order' => 'getOrder',
        'orderId' => 'getOrderId',
        'reference' => 'getReference',
        'refunded' => 'getRefunded',
        'state' => 'getState',
        'successUrl' => 'getSuccessUrl',
        'testmode' => 'getTestmode',
        'textOnStatement' => 'getTextOnStatement',
        'updatedAt' => 'getUpdatedAt',
        'createdAt' => 'getCreatedAt',
        'expiresAt' => 'getExpiresAt',
        'mandateId' => 'getMandateId',
        'subscriptionId' => 'getSubscriptionId',
        'variables' => 'getVariables',
        'paymentDetails' => 'getPaymentDetails',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('cardFee', $data ?? [], null);
        $this->setIfExists('autocapture', $data ?? [], null);
        $this->setIfExists('callbackUrl', $data ?? [], null);
        $this->setIfExists('cancelUrl', $data ?? [], null);
        $this->setIfExists('captured', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('facilitator', $data ?? [], null);
        $this->setIfExists('acquirer', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('linkUuid', $data ?? [], null);
        $this->setIfExists('methods', $data ?? [], null);
        $this->setIfExists('remoteIp', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('refunded', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('successUrl', $data ?? [], null);
        $this->setIfExists('testmode', $data ?? [], null);
        $this->setIfExists('textOnStatement', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('expiresAt', $data ?? [], null);
        $this->setIfExists('mandateId', $data ?? [], null);
        $this->setIfExists('subscriptionId', $data ?? [], null);
        $this->setIfExists('variables', $data ?? [], null);
        $this->setIfExists('paymentDetails', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['autocapture'] === null) {
            $invalidProperties[] = "'autocapture' can't be null";
        }
        if ($this->container['callbackUrl'] === null) {
            $invalidProperties[] = "'callbackUrl' can't be null";
        }
        if ($this->container['cancelUrl'] === null) {
            $invalidProperties[] = "'cancelUrl' can't be null";
        }
        if ($this->container['captured'] === null) {
            $invalidProperties[] = "'captured' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['facilitator'] === null) {
            $invalidProperties[] = "'facilitator' can't be null";
        }
        if ($this->container['acquirer'] === null) {
            $invalidProperties[] = "'acquirer' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['link'] === null) {
            $invalidProperties[] = "'link' can't be null";
        }
        if ($this->container['linkUuid'] === null) {
            $invalidProperties[] = "'linkUuid' can't be null";
        }
        if ($this->container['methods'] === null) {
            $invalidProperties[] = "'methods' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['orderId'] === null) {
            $invalidProperties[] = "'orderId' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['refunded'] === null) {
            $invalidProperties[] = "'refunded' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['successUrl'] === null) {
            $invalidProperties[] = "'successUrl' can't be null";
        }
        if ($this->container['testmode'] === null) {
            $invalidProperties[] = "'testmode' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['variables'] === null) {
            $invalidProperties[] = "'variables' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|null $accountId accountId
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        if (is_null($accountId)) {
            throw new \InvalidArgumentException('non-nullable accountId cannot be null');
        }
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets cardFee
     *
     * @return int|null
     */
    public function getCardFee()
    {
        return $this->container['cardFee'];
    }

    /**
     * Sets cardFee
     *
     * @param int|null $cardFee cardFee
     *
     * @return self
     */
    public function setCardFee($cardFee)
    {
        if (is_null($cardFee)) {
            throw new \InvalidArgumentException('non-nullable cardFee cannot be null');
        }
        $this->container['cardFee'] = $cardFee;

        return $this;
    }

    /**
     * Gets autocapture
     *
     * @return bool
     */
    public function getAutocapture()
    {
        return $this->container['autocapture'];
    }

    /**
     * Sets autocapture
     *
     * @param bool $autocapture autocapture
     *
     * @return self
     */
    public function setAutocapture($autocapture)
    {
        if (is_null($autocapture)) {
            throw new \InvalidArgumentException('non-nullable autocapture cannot be null');
        }
        $this->container['autocapture'] = $autocapture;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string $callbackUrl callbackUrl
     *
     * @return self
     */
    public function setCallbackUrl($callbackUrl)
    {
        if (is_null($callbackUrl)) {
            throw new \InvalidArgumentException('non-nullable callbackUrl cannot be null');
        }
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }

    /**
     * Gets cancelUrl
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancelUrl'];
    }

    /**
     * Sets cancelUrl
     *
     * @param string $cancelUrl cancelUrl
     *
     * @return self
     */
    public function setCancelUrl($cancelUrl)
    {
        if (is_null($cancelUrl)) {
            throw new \InvalidArgumentException('non-nullable cancelUrl cannot be null');
        }
        $this->container['cancelUrl'] = $cancelUrl;

        return $this;
    }

    /**
     * Gets captured
     *
     * @return int
     */
    public function getCaptured()
    {
        return $this->container['captured'];
    }

    /**
     * Sets captured
     *
     * @param int $captured captured
     *
     * @return self
     */
    public function setCaptured($captured)
    {
        if (is_null($captured)) {
            throw new \InvalidArgumentException('non-nullable captured cannot be null');
        }
        $this->container['captured'] = $captured;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets facilitator
     *
     * @return string
     */
    public function getFacilitator()
    {
        return $this->container['facilitator'];
    }

    /**
     * Sets facilitator
     *
     * @param string $facilitator facilitator
     *
     * @return self
     */
    public function setFacilitator($facilitator)
    {
        if (is_null($facilitator)) {
            throw new \InvalidArgumentException('non-nullable facilitator cannot be null');
        }
        $this->container['facilitator'] = $facilitator;

        return $this;
    }

    /**
     * Gets acquirer
     *
     * @return string
     */
    public function getAcquirer()
    {
        return $this->container['acquirer'];
    }

    /**
     * Sets acquirer
     *
     * @param string $acquirer acquirer
     *
     * @return self
     */
    public function setAcquirer($acquirer)
    {
        if (is_null($acquirer)) {
            throw new \InvalidArgumentException('non-nullable acquirer cannot be null');
        }
        $this->container['acquirer'] = $acquirer;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets linkUuid
     *
     * @return string
     */
    public function getLinkUuid()
    {
        return $this->container['linkUuid'];
    }

    /**
     * Sets linkUuid
     *
     * @param string $linkUuid linkUuid
     *
     * @return self
     */
    public function setLinkUuid($linkUuid)
    {
        if (is_null($linkUuid)) {
            throw new \InvalidArgumentException('non-nullable linkUuid cannot be null');
        }
        $this->container['linkUuid'] = $linkUuid;

        return $this;
    }

    /**
     * Gets methods
     *
     * @return string[]
     */
    public function getMethods()
    {
        return $this->container['methods'];
    }

    /**
     * Sets methods
     *
     * @param string[] $methods methods
     *
     * @return self
     */
    public function setMethods($methods)
    {
        if (is_null($methods)) {
            throw new \InvalidArgumentException('non-nullable methods cannot be null');
        }
        $this->container['methods'] = $methods;

        return $this;
    }

    /**
     * Gets remoteIp
     *
     * @return string|null
     */
    public function getRemoteIp()
    {
        return $this->container['remoteIp'];
    }

    /**
     * Sets remoteIp
     *
     * @param string|null $remoteIp remoteIp
     *
     * @return self
     */
    public function setRemoteIp($remoteIp)
    {
        if (is_null($remoteIp)) {
            throw new \InvalidArgumentException('non-nullable remoteIp cannot be null');
        }
        $this->container['remoteIp'] = $remoteIp;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Pensopay\Client\Model\PaymentPaymentOrder
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Pensopay\Client\Model\PaymentPaymentOrder $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return int
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param int $refunded refunded
     *
     * @return self
     */
    public function setRefunded($refunded)
    {
        if (is_null($refunded)) {
            throw new \InvalidArgumentException('non-nullable refunded cannot be null');
        }
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets successUrl
     *
     * @return string
     */
    public function getSuccessUrl()
    {
        return $this->container['successUrl'];
    }

    /**
     * Sets successUrl
     *
     * @param string $successUrl successUrl
     *
     * @return self
     */
    public function setSuccessUrl($successUrl)
    {
        if (is_null($successUrl)) {
            throw new \InvalidArgumentException('non-nullable successUrl cannot be null');
        }
        $this->container['successUrl'] = $successUrl;

        return $this;
    }

    /**
     * Gets testmode
     *
     * @return bool
     */
    public function getTestmode()
    {
        return $this->container['testmode'];
    }

    /**
     * Sets testmode
     *
     * @param bool $testmode testmode
     *
     * @return self
     */
    public function setTestmode($testmode)
    {
        if (is_null($testmode)) {
            throw new \InvalidArgumentException('non-nullable testmode cannot be null');
        }
        $this->container['testmode'] = $testmode;

        return $this;
    }

    /**
     * Gets textOnStatement
     *
     * @return string|null
     */
    public function getTextOnStatement()
    {
        return $this->container['textOnStatement'];
    }

    /**
     * Sets textOnStatement
     *
     * @param string|null $textOnStatement textOnStatement
     *
     * @return self
     */
    public function setTextOnStatement($textOnStatement)
    {
        if (is_null($textOnStatement)) {
            throw new \InvalidArgumentException('non-nullable textOnStatement cannot be null');
        }
        $this->container['textOnStatement'] = $textOnStatement;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param string|null $expiresAt expiresAt
     *
     * @return self
     */
    public function setExpiresAt($expiresAt)
    {
        if (is_null($expiresAt)) {
            throw new \InvalidArgumentException('non-nullable expiresAt cannot be null');
        }
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets mandateId
     *
     * @return int|null
     */
    public function getMandateId()
    {
        return $this->container['mandateId'];
    }

    /**
     * Sets mandateId
     *
     * @param int|null $mandateId mandateId
     *
     * @return self
     */
    public function setMandateId($mandateId)
    {
        if (is_null($mandateId)) {
            throw new \InvalidArgumentException('non-nullable mandateId cannot be null');
        }
        $this->container['mandateId'] = $mandateId;

        return $this;
    }

    /**
     * Gets subscriptionId
     *
     * @return int|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscriptionId'];
    }

    /**
     * Sets subscriptionId
     *
     * @param int|null $subscriptionId subscriptionId
     *
     * @return self
     */
    public function setSubscriptionId($subscriptionId)
    {
        if (is_null($subscriptionId)) {
            throw new \InvalidArgumentException('non-nullable subscriptionId cannot be null');
        }
        $this->container['subscriptionId'] = $subscriptionId;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return array<string,string>
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param array<string,string> $variables variables
     *
     * @return self
     */
    public function setVariables($variables)
    {
        if (is_null($variables)) {
            throw new \InvalidArgumentException('non-nullable variables cannot be null');
        }
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets paymentDetails
     *
     * @return \Pensopay\Client\Model\PaymentPaymentDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['paymentDetails'];
    }

    /**
     * Sets paymentDetails
     *
     * @param \Pensopay\Client\Model\PaymentPaymentDetails|null $paymentDetails paymentDetails
     *
     * @return self
     */
    public function setPaymentDetails($paymentDetails)
    {
        if (is_null($paymentDetails)) {
            throw new \InvalidArgumentException('non-nullable paymentDetails cannot be null');
        }
        $this->container['paymentDetails'] = $paymentDetails;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


