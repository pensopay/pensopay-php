<?php
/**
 * PaymentCreatePaymentRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Pensopay\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Create and manage your Payments
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@pensopay.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pensopay\Client\Model;

use \ArrayAccess;
use \Pensopay\Client\ObjectSerializer;

/**
 * PaymentCreatePaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  Pensopay\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentCreatePaymentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'payment.CreatePaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'int',
        'autocapture' => 'bool',
        'brandingId' => 'string',
        'callbackUrl' => 'string',
        'cancelUrl' => 'string',
        'currency' => 'string',
        'locale' => 'string',
        'methods' => 'string[]',
        'order' => '\Pensopay\Client\Model\PaymentPaymentOrder',
        'orderId' => 'string',
        'successUrl' => 'string',
        'testmode' => 'bool',
        'variables' => 'array<string,string>',
        'brandingUuid' => 'string',
        'textOnStatement' => 'string',
        'expiresIn' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'autocapture' => null,
        'brandingId' => null,
        'callbackUrl' => 'uri',
        'cancelUrl' => 'uri',
        'currency' => null,
        'locale' => null,
        'methods' => null,
        'order' => null,
        'orderId' => null,
        'successUrl' => 'uri',
        'testmode' => null,
        'variables' => null,
        'brandingUuid' => null,
        'textOnStatement' => null,
        'expiresIn' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'autocapture' => false,
        'brandingId' => false,
        'callbackUrl' => false,
        'cancelUrl' => false,
        'currency' => false,
        'locale' => false,
        'methods' => false,
        'order' => false,
        'orderId' => false,
        'successUrl' => false,
        'testmode' => false,
        'variables' => false,
        'brandingUuid' => false,
        'textOnStatement' => false,
        'expiresIn' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'autocapture' => 'autocapture',
        'brandingId' => 'branding_id',
        'callbackUrl' => 'callback_url',
        'cancelUrl' => 'cancel_url',
        'currency' => 'currency',
        'locale' => 'locale',
        'methods' => 'methods',
        'order' => 'order',
        'orderId' => 'order_id',
        'successUrl' => 'success_url',
        'testmode' => 'testmode',
        'variables' => 'variables',
        'brandingUuid' => 'branding_uuid',
        'textOnStatement' => 'text_on_statement',
        'expiresIn' => 'expires_in'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'autocapture' => 'setAutocapture',
        'brandingId' => 'setBrandingId',
        'callbackUrl' => 'setCallbackUrl',
        'cancelUrl' => 'setCancelUrl',
        'currency' => 'setCurrency',
        'locale' => 'setLocale',
        'methods' => 'setMethods',
        'order' => 'setOrder',
        'orderId' => 'setOrderId',
        'successUrl' => 'setSuccessUrl',
        'testmode' => 'setTestmode',
        'variables' => 'setVariables',
        'brandingUuid' => 'setBrandingUuid',
        'textOnStatement' => 'setTextOnStatement',
        'expiresIn' => 'setExpiresIn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'autocapture' => 'getAutocapture',
        'brandingId' => 'getBrandingId',
        'callbackUrl' => 'getCallbackUrl',
        'cancelUrl' => 'getCancelUrl',
        'currency' => 'getCurrency',
        'locale' => 'getLocale',
        'methods' => 'getMethods',
        'order' => 'getOrder',
        'orderId' => 'getOrderId',
        'successUrl' => 'getSuccessUrl',
        'testmode' => 'getTestmode',
        'variables' => 'getVariables',
        'brandingUuid' => 'getBrandingUuid',
        'textOnStatement' => 'getTextOnStatement',
        'expiresIn' => 'getExpiresIn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const METHODS_CARD = 'card';
    public const METHODS_DANKORT = 'dankort';
    public const METHODS_MASTERCARD = 'mastercard';
    public const METHODS_VISA = 'visa';
    public const METHODS_VISADEBIT = 'visadebit';
    public const METHODS_VISAELECTRON = 'visaelectron';
    public const METHODS_MASTERCARDDEBIT = 'mastercarddebit';
    public const METHODS_WALLET = 'wallet';
    public const METHODS_MOBILEPAY = 'mobilepay';
    public const METHODS_VIPPSPSP = 'vippspsp';
    public const METHODS_APPLEPAY = 'applepay';
    public const METHODS_GOOGLEPAY = 'googlepay';
    public const METHODS_PAYLATER = 'paylater';
    public const METHODS_ANYDAY = 'anyday';
    public const METHODS_VIABILL = 'viabill';
    public const METHODS_BANKTRANSFER = 'banktransfer';
    public const METHODS_SWISH = 'swish';
    public const METHODS_THIRDPARTY = 'thirdparty';
    public const METHODS_PAYPAL = 'paypal';
    public const METHODS_KLARNA = 'klarna';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodsAllowableValues()
    {
        return [
            self::METHODS_CARD,
            self::METHODS_DANKORT,
            self::METHODS_MASTERCARD,
            self::METHODS_VISA,
            self::METHODS_VISADEBIT,
            self::METHODS_VISAELECTRON,
            self::METHODS_MASTERCARDDEBIT,
            self::METHODS_WALLET,
            self::METHODS_MOBILEPAY,
            self::METHODS_VIPPSPSP,
            self::METHODS_APPLEPAY,
            self::METHODS_GOOGLEPAY,
            self::METHODS_PAYLATER,
            self::METHODS_ANYDAY,
            self::METHODS_VIABILL,
            self::METHODS_BANKTRANSFER,
            self::METHODS_SWISH,
            self::METHODS_THIRDPARTY,
            self::METHODS_PAYPAL,
            self::METHODS_KLARNA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('autocapture', $data ?? [], null);
        $this->setIfExists('brandingId', $data ?? [], null);
        $this->setIfExists('callbackUrl', $data ?? [], null);
        $this->setIfExists('cancelUrl', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('methods', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('successUrl', $data ?? [], null);
        $this->setIfExists('testmode', $data ?? [], null);
        $this->setIfExists('variables', $data ?? [], null);
        $this->setIfExists('brandingUuid', $data ?? [], null);
        $this->setIfExists('textOnStatement', $data ?? [], null);
        $this->setIfExists('expiresIn', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['callbackUrl']) && !preg_match("/^https:\/\//", $this->container['callbackUrl'])) {
            $invalidProperties[] = "invalid value for 'callbackUrl', must be conform to the pattern /^https:\/\//.";
        }

        if (!is_null($this->container['cancelUrl']) && !preg_match("/^https:\/\//", $this->container['cancelUrl'])) {
            $invalidProperties[] = "invalid value for 'cancelUrl', must be conform to the pattern /^https:\/\//.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 5)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) < 5)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['orderId'] === null) {
            $invalidProperties[] = "'orderId' can't be null";
        }
        if ((mb_strlen($this->container['orderId']) > 36)) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['orderId']) < 1)) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9_\\-]*$/", $this->container['orderId'])) {
            $invalidProperties[] = "invalid value for 'orderId', must be conform to the pattern /^[a-zA-Z0-9_\\-]*$/.";
        }

        if (!is_null($this->container['successUrl']) && !preg_match("/^https:\/\//", $this->container['successUrl'])) {
            $invalidProperties[] = "invalid value for 'successUrl', must be conform to the pattern /^https:\/\//.";
        }

        if (!is_null($this->container['textOnStatement']) && (mb_strlen($this->container['textOnStatement']) > 22)) {
            $invalidProperties[] = "invalid value for 'textOnStatement', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['textOnStatement']) && (mb_strlen($this->container['textOnStatement']) < 2)) {
            $invalidProperties[] = "invalid value for 'textOnStatement', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['textOnStatement']) && !preg_match("/^[\\x20-\\x7E]*$/", $this->container['textOnStatement'])) {
            $invalidProperties[] = "invalid value for 'textOnStatement', must be conform to the pattern /^[\\x20-\\x7E]*$/.";
        }

        if (!is_null($this->container['expiresIn']) && ($this->container['expiresIn'] < 0)) {
            $invalidProperties[] = "invalid value for 'expiresIn', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The amount in currency's lowest denominator
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling PaymentCreatePaymentRequest., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets autocapture
     *
     * @return bool|null
     */
    public function getAutocapture()
    {
        return $this->container['autocapture'];
    }

    /**
     * Sets autocapture
     *
     * @param bool|null $autocapture autocapture
     *
     * @return self
     */
    public function setAutocapture($autocapture)
    {
        if (is_null($autocapture)) {
            throw new \InvalidArgumentException('non-nullable autocapture cannot be null');
        }
        $this->container['autocapture'] = $autocapture;

        return $this;
    }

    /**
     * Gets brandingId
     *
     * @return string|null
     */
    public function getBrandingId()
    {
        return $this->container['brandingId'];
    }

    /**
     * Sets brandingId
     *
     * @param string|null $brandingId brandingId
     *
     * @return self
     */
    public function setBrandingId($brandingId)
    {
        if (is_null($brandingId)) {
            throw new \InvalidArgumentException('non-nullable brandingId cannot be null');
        }
        $this->container['brandingId'] = $brandingId;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string|null $callbackUrl callbackUrl
     *
     * @return self
     */
    public function setCallbackUrl($callbackUrl)
    {
        if (is_null($callbackUrl)) {
            throw new \InvalidArgumentException('non-nullable callbackUrl cannot be null');
        }

        if ((!preg_match("/^https:\/\//", ObjectSerializer::toString($callbackUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$callbackUrl when calling PaymentCreatePaymentRequest., must conform to the pattern /^https:\/\//.");
        }

        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }

    /**
     * Gets cancelUrl
     *
     * @return string|null
     */
    public function getCancelUrl()
    {
        return $this->container['cancelUrl'];
    }

    /**
     * Sets cancelUrl
     *
     * @param string|null $cancelUrl cancelUrl
     *
     * @return self
     */
    public function setCancelUrl($cancelUrl)
    {
        if (is_null($cancelUrl)) {
            throw new \InvalidArgumentException('non-nullable cancelUrl cannot be null');
        }

        if ((!preg_match("/^https:\/\//", ObjectSerializer::toString($cancelUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$cancelUrl when calling PaymentCreatePaymentRequest., must conform to the pattern /^https:\/\//.");
        }

        $this->container['cancelUrl'] = $cancelUrl;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency in ISO 4217 format
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Locale to use in payment window
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        if ((mb_strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling PaymentCreatePaymentRequest., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($locale) < 5)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling PaymentCreatePaymentRequest., must be bigger than or equal to 5.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets methods
     *
     * @return string[]|null
     */
    public function getMethods()
    {
        return $this->container['methods'];
    }

    /**
     * Sets methods
     *
     * @param string[]|null $methods The following payment methods can be defined as available when creating the payment. _Ex._ if `[\"card\"]` is sent all available card methods for the account will be available.  **card** - dankort - mastercard - visa - visadebit / visaelectron - mastercarddebit  **wallet** - mobilepay - vippspsp - googlepay - applepay  **paylater** - anyday - viabill  **thirdparty** - paypal - klarna  **banktransfer** - swish
     *
     * @return self
     */
    public function setMethods($methods)
    {
        if (is_null($methods)) {
            throw new \InvalidArgumentException('non-nullable methods cannot be null');
        }
        $allowedValues = $this->getMethodsAllowableValues();
        if (array_diff($methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['methods'] = $methods;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Pensopay\Client\Model\PaymentPaymentOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Pensopay\Client\Model\PaymentPaymentOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        if ((mb_strlen($orderId) > 36)) {
            throw new \InvalidArgumentException('invalid length for $orderId when calling PaymentCreatePaymentRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($orderId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $orderId when calling PaymentCreatePaymentRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_\\-]*$/", ObjectSerializer::toString($orderId)))) {
            throw new \InvalidArgumentException("invalid value for \$orderId when calling PaymentCreatePaymentRequest., must conform to the pattern /^[a-zA-Z0-9_\\-]*$/.");
        }

        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets successUrl
     *
     * @return string|null
     */
    public function getSuccessUrl()
    {
        return $this->container['successUrl'];
    }

    /**
     * Sets successUrl
     *
     * @param string|null $successUrl successUrl
     *
     * @return self
     */
    public function setSuccessUrl($successUrl)
    {
        if (is_null($successUrl)) {
            throw new \InvalidArgumentException('non-nullable successUrl cannot be null');
        }

        if ((!preg_match("/^https:\/\//", ObjectSerializer::toString($successUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$successUrl when calling PaymentCreatePaymentRequest., must conform to the pattern /^https:\/\//.");
        }

        $this->container['successUrl'] = $successUrl;

        return $this;
    }

    /**
     * Gets testmode
     *
     * @return bool|null
     */
    public function getTestmode()
    {
        return $this->container['testmode'];
    }

    /**
     * Sets testmode
     *
     * @param bool|null $testmode testmode
     *
     * @return self
     */
    public function setTestmode($testmode)
    {
        if (is_null($testmode)) {
            throw new \InvalidArgumentException('non-nullable testmode cannot be null');
        }
        $this->container['testmode'] = $testmode;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return array<string,string>|null
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param array<string,string>|null $variables variables
     *
     * @return self
     */
    public function setVariables($variables)
    {
        if (is_null($variables)) {
            throw new \InvalidArgumentException('non-nullable variables cannot be null');
        }
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets brandingUuid
     *
     * @return string|null
     */
    public function getBrandingUuid()
    {
        return $this->container['brandingUuid'];
    }

    /**
     * Sets brandingUuid
     *
     * @param string|null $brandingUuid UUID of branding to use on payment window
     *
     * @return self
     */
    public function setBrandingUuid($brandingUuid)
    {
        if (is_null($brandingUuid)) {
            throw new \InvalidArgumentException('non-nullable brandingUuid cannot be null');
        }
        $this->container['brandingUuid'] = $brandingUuid;

        return $this;
    }

    /**
     * Gets textOnStatement
     *
     * @return string|null
     */
    public function getTextOnStatement()
    {
        return $this->container['textOnStatement'];
    }

    /**
     * Sets textOnStatement
     *
     * @param string|null $textOnStatement textOnStatement
     *
     * @return self
     */
    public function setTextOnStatement($textOnStatement)
    {
        if (is_null($textOnStatement)) {
            throw new \InvalidArgumentException('non-nullable textOnStatement cannot be null');
        }
        if ((mb_strlen($textOnStatement) > 22)) {
            throw new \InvalidArgumentException('invalid length for $textOnStatement when calling PaymentCreatePaymentRequest., must be smaller than or equal to 22.');
        }
        if ((mb_strlen($textOnStatement) < 2)) {
            throw new \InvalidArgumentException('invalid length for $textOnStatement when calling PaymentCreatePaymentRequest., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[\\x20-\\x7E]*$/", ObjectSerializer::toString($textOnStatement)))) {
            throw new \InvalidArgumentException("invalid value for \$textOnStatement when calling PaymentCreatePaymentRequest., must conform to the pattern /^[\\x20-\\x7E]*$/.");
        }

        $this->container['textOnStatement'] = $textOnStatement;

        return $this;
    }

    /**
     * Gets expiresIn
     *
     * @return int|null
     */
    public function getExpiresIn()
    {
        return $this->container['expiresIn'];
    }

    /**
     * Sets expiresIn
     *
     * @param int|null $expiresIn Specify amount of seconds the payment will be available for the cardholder.
     *
     * @return self
     */
    public function setExpiresIn($expiresIn)
    {
        if (is_null($expiresIn)) {
            throw new \InvalidArgumentException('non-nullable expiresIn cannot be null');
        }

        if (($expiresIn < 0)) {
            throw new \InvalidArgumentException('invalid value for $expiresIn when calling PaymentCreatePaymentRequest., must be bigger than or equal to 0.');
        }

        $this->container['expiresIn'] = $expiresIn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


