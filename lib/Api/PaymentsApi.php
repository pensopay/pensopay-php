<?php
/**
 * PaymentsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Pensopay\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Create and manage your Payments
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@pensopay.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pensopay\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Pensopay\Client\ApiException;
use Pensopay\Client\Configuration;
use Pensopay\Client\FormDataProcessor;
use Pensopay\Client\HeaderSelector;
use Pensopay\Client\ObjectSerializer;

/**
 * PaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Pensopay\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'anonymizePayment' => [
            'application/json',
        ],
        'cancelPayment' => [
            'application/json',
        ],
        'capturePayment' => [
            'application/json',
        ],
        'createPayment' => [
            'application/json',
        ],
        'getPayment' => [
            'application/json',
        ],
        'getPaymentEvents' => [
            'application/json',
        ],
        'getPayments' => [
            'application/json',
        ],
        'refundPayment' => [
            'application/json',
        ],
        'updatePayment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation anonymizePayment
     *
     * Anonymize payment
     *
     * @param  int $id Id of the payment to anonymize (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['anonymizePayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function anonymizePayment($id, string $contentType = self::contentTypes['anonymizePayment'][0])
    {
        list($response) = $this->anonymizePaymentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation anonymizePaymentWithHttpInfo
     *
     * Anonymize payment
     *
     * @param  int $id Id of the payment to anonymize (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['anonymizePayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function anonymizePaymentWithHttpInfo($id, string $contentType = self::contentTypes['anonymizePayment'][0])
    {
        $request = $this->anonymizePaymentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation anonymizePaymentAsync
     *
     * Anonymize payment
     *
     * @param  int $id Id of the payment to anonymize (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['anonymizePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function anonymizePaymentAsync($id, string $contentType = self::contentTypes['anonymizePayment'][0])
    {
        return $this->anonymizePaymentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation anonymizePaymentAsyncWithHttpInfo
     *
     * Anonymize payment
     *
     * @param  int $id Id of the payment to anonymize (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['anonymizePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function anonymizePaymentAsyncWithHttpInfo($id, string $contentType = self::contentTypes['anonymizePayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->anonymizePaymentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'anonymizePayment'
     *
     * @param  int $id Id of the payment to anonymize (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['anonymizePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function anonymizePaymentRequest($id, string $contentType = self::contentTypes['anonymizePayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling anonymizePayment'
            );
        }


        $resourcePath = '/payments/{id}/anonymize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPayment
     *
     * Cancel payment
     *
     * @param  int $id Id of the payment to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function cancelPayment($id, string $contentType = self::contentTypes['cancelPayment'][0])
    {
        list($response) = $this->cancelPaymentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation cancelPaymentWithHttpInfo
     *
     * Cancel payment
     *
     * @param  int $id Id of the payment to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentWithHttpInfo($id, string $contentType = self::contentTypes['cancelPayment'][0])
    {
        $request = $this->cancelPaymentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelPaymentAsync
     *
     * Cancel payment
     *
     * @param  int $id Id of the payment to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentAsync($id, string $contentType = self::contentTypes['cancelPayment'][0])
    {
        return $this->cancelPaymentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentAsyncWithHttpInfo
     *
     * Cancel payment
     *
     * @param  int $id Id of the payment to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentAsyncWithHttpInfo($id, string $contentType = self::contentTypes['cancelPayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->cancelPaymentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPayment'
     *
     * @param  int $id Id of the payment to cancel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPaymentRequest($id, string $contentType = self::contentTypes['cancelPayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelPayment'
            );
        }


        $resourcePath = '/payments/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation capturePayment
     *
     * Capture payment
     *
     * @param  int $id Id of the payment to capture (required)
     * @param  \Pensopay\Client\Model\PaymentCapturePaymentRequest|null $paymentCapturePaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function capturePayment($id, $paymentCapturePaymentRequest = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        list($response) = $this->capturePaymentWithHttpInfo($id, $paymentCapturePaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation capturePaymentWithHttpInfo
     *
     * Capture payment
     *
     * @param  int $id Id of the payment to capture (required)
     * @param  \Pensopay\Client\Model\PaymentCapturePaymentRequest|null $paymentCapturePaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function capturePaymentWithHttpInfo($id, $paymentCapturePaymentRequest = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        $request = $this->capturePaymentRequest($id, $paymentCapturePaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation capturePaymentAsync
     *
     * Capture payment
     *
     * @param  int $id Id of the payment to capture (required)
     * @param  \Pensopay\Client\Model\PaymentCapturePaymentRequest|null $paymentCapturePaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function capturePaymentAsync($id, $paymentCapturePaymentRequest = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        return $this->capturePaymentAsyncWithHttpInfo($id, $paymentCapturePaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation capturePaymentAsyncWithHttpInfo
     *
     * Capture payment
     *
     * @param  int $id Id of the payment to capture (required)
     * @param  \Pensopay\Client\Model\PaymentCapturePaymentRequest|null $paymentCapturePaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function capturePaymentAsyncWithHttpInfo($id, $paymentCapturePaymentRequest = null, string $contentType = self::contentTypes['capturePayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->capturePaymentRequest($id, $paymentCapturePaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'capturePayment'
     *
     * @param  int $id Id of the payment to capture (required)
     * @param  \Pensopay\Client\Model\PaymentCapturePaymentRequest|null $paymentCapturePaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['capturePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function capturePaymentRequest($id, $paymentCapturePaymentRequest = null, string $contentType = self::contentTypes['capturePayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling capturePayment'
            );
        }



        $resourcePath = '/payments/{id}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paymentCapturePaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paymentCapturePaymentRequest));
            } else {
                $httpBody = $paymentCapturePaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayment
     *
     * Create new payment
     *
     * @param  \Pensopay\Client\Model\PaymentCreatePaymentRequest $paymentCreatePaymentRequest payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function createPayment($paymentCreatePaymentRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        list($response) = $this->createPaymentWithHttpInfo($paymentCreatePaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentWithHttpInfo
     *
     * Create new payment
     *
     * @param  \Pensopay\Client\Model\PaymentCreatePaymentRequest $paymentCreatePaymentRequest payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentWithHttpInfo($paymentCreatePaymentRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        $request = $this->createPaymentRequest($paymentCreatePaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentAsync
     *
     * Create new payment
     *
     * @param  \Pensopay\Client\Model\PaymentCreatePaymentRequest $paymentCreatePaymentRequest payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAsync($paymentCreatePaymentRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        return $this->createPaymentAsyncWithHttpInfo($paymentCreatePaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentAsyncWithHttpInfo
     *
     * Create new payment
     *
     * @param  \Pensopay\Client\Model\PaymentCreatePaymentRequest $paymentCreatePaymentRequest payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAsyncWithHttpInfo($paymentCreatePaymentRequest, string $contentType = self::contentTypes['createPayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->createPaymentRequest($paymentCreatePaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayment'
     *
     * @param  \Pensopay\Client\Model\PaymentCreatePaymentRequest $paymentCreatePaymentRequest payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentRequest($paymentCreatePaymentRequest, string $contentType = self::contentTypes['createPayment'][0])
    {

        // verify the required parameter 'paymentCreatePaymentRequest' is set
        if ($paymentCreatePaymentRequest === null || (is_array($paymentCreatePaymentRequest) && count($paymentCreatePaymentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentCreatePaymentRequest when calling createPayment'
            );
        }


        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paymentCreatePaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paymentCreatePaymentRequest));
            } else {
                $httpBody = $paymentCreatePaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayment
     *
     * Get single payment
     *
     * @param  int $id Id of the payment to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function getPayment($id, string $contentType = self::contentTypes['getPayment'][0])
    {
        list($response) = $this->getPaymentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentWithHttpInfo
     *
     * Get single payment
     *
     * @param  int $id Id of the payment to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentWithHttpInfo($id, string $contentType = self::contentTypes['getPayment'][0])
    {
        $request = $this->getPaymentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentAsync
     *
     * Get single payment
     *
     * @param  int $id Id of the payment to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsync($id, string $contentType = self::contentTypes['getPayment'][0])
    {
        return $this->getPaymentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAsyncWithHttpInfo
     *
     * Get single payment
     *
     * @param  int $id Id of the payment to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getPayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->getPaymentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayment'
     *
     * @param  int $id Id of the payment to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentRequest($id, string $contentType = self::contentTypes['getPayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPayment'
            );
        }


        $resourcePath = '/payments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentEvents
     *
     * Get events for a given payment
     *
     * @param  int $id Id for the payment (required)
     * @param  string|null $type Filter events by type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentEvents'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\GetPaymentEvents200Response
     */
    public function getPaymentEvents($id, $type = null, string $contentType = self::contentTypes['getPaymentEvents'][0])
    {
        list($response) = $this->getPaymentEventsWithHttpInfo($id, $type, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentEventsWithHttpInfo
     *
     * Get events for a given payment
     *
     * @param  int $id Id for the payment (required)
     * @param  string|null $type Filter events by type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentEvents'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\GetPaymentEvents200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentEventsWithHttpInfo($id, $type = null, string $contentType = self::contentTypes['getPaymentEvents'][0])
    {
        $request = $this->getPaymentEventsRequest($id, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\GetPaymentEvents200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\GetPaymentEvents200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\GetPaymentEvents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentEventsAsync
     *
     * Get events for a given payment
     *
     * @param  int $id Id for the payment (required)
     * @param  string|null $type Filter events by type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentEventsAsync($id, $type = null, string $contentType = self::contentTypes['getPaymentEvents'][0])
    {
        return $this->getPaymentEventsAsyncWithHttpInfo($id, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentEventsAsyncWithHttpInfo
     *
     * Get events for a given payment
     *
     * @param  int $id Id for the payment (required)
     * @param  string|null $type Filter events by type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentEventsAsyncWithHttpInfo($id, $type = null, string $contentType = self::contentTypes['getPaymentEvents'][0])
    {
        $returnType = '\Pensopay\Client\Model\GetPaymentEvents200Response';
        $request = $this->getPaymentEventsRequest($id, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentEvents'
     *
     * @param  int $id Id for the payment (required)
     * @param  string|null $type Filter events by type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentEventsRequest($id, $type = null, string $contentType = self::contentTypes['getPaymentEvents'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPaymentEvents'
            );
        }



        $resourcePath = '/payments/{id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayments
     *
     * Get payments
     *
     * @param  string|null $orderId Find payments matching order_id (optional)
     * @param  int|null $perPage How many results to list per page between 1 and 250, defaults to 15. (optional)
     * @param  int|null $page What page to view. (optional)
     * @param  string|null $currency Find payments with currency (optional)
     * @param  string|null $dateFrom Find payments created after date_from, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $dateTo Find payments created before or until date_to, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $updatedAfter Find payment updated after (optional)
     * @param  string|null $updatedBefore Find payment updated before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentsResponse
     */
    public function getPayments($orderId = null, $perPage = null, $page = null, $currency = null, $dateFrom = null, $dateTo = null, $updatedAfter = null, $updatedBefore = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        list($response) = $this->getPaymentsWithHttpInfo($orderId, $perPage, $page, $currency, $dateFrom, $dateTo, $updatedAfter, $updatedBefore, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentsWithHttpInfo
     *
     * Get payments
     *
     * @param  string|null $orderId Find payments matching order_id (optional)
     * @param  int|null $perPage How many results to list per page between 1 and 250, defaults to 15. (optional)
     * @param  int|null $page What page to view. (optional)
     * @param  string|null $currency Find payments with currency (optional)
     * @param  string|null $dateFrom Find payments created after date_from, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $dateTo Find payments created before or until date_to, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $updatedAfter Find payment updated after (optional)
     * @param  string|null $updatedBefore Find payment updated before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsWithHttpInfo($orderId = null, $perPage = null, $page = null, $currency = null, $dateFrom = null, $dateTo = null, $updatedAfter = null, $updatedBefore = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        $request = $this->getPaymentsRequest($orderId, $perPage, $page, $currency, $dateFrom, $dateTo, $updatedAfter, $updatedBefore, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentsAsync
     *
     * Get payments
     *
     * @param  string|null $orderId Find payments matching order_id (optional)
     * @param  int|null $perPage How many results to list per page between 1 and 250, defaults to 15. (optional)
     * @param  int|null $page What page to view. (optional)
     * @param  string|null $currency Find payments with currency (optional)
     * @param  string|null $dateFrom Find payments created after date_from, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $dateTo Find payments created before or until date_to, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $updatedAfter Find payment updated after (optional)
     * @param  string|null $updatedBefore Find payment updated before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsync($orderId = null, $perPage = null, $page = null, $currency = null, $dateFrom = null, $dateTo = null, $updatedAfter = null, $updatedBefore = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        return $this->getPaymentsAsyncWithHttpInfo($orderId, $perPage, $page, $currency, $dateFrom, $dateTo, $updatedAfter, $updatedBefore, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsAsyncWithHttpInfo
     *
     * Get payments
     *
     * @param  string|null $orderId Find payments matching order_id (optional)
     * @param  int|null $perPage How many results to list per page between 1 and 250, defaults to 15. (optional)
     * @param  int|null $page What page to view. (optional)
     * @param  string|null $currency Find payments with currency (optional)
     * @param  string|null $dateFrom Find payments created after date_from, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $dateTo Find payments created before or until date_to, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $updatedAfter Find payment updated after (optional)
     * @param  string|null $updatedBefore Find payment updated before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsyncWithHttpInfo($orderId = null, $perPage = null, $page = null, $currency = null, $dateFrom = null, $dateTo = null, $updatedAfter = null, $updatedBefore = null, string $contentType = self::contentTypes['getPayments'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentsResponse';
        $request = $this->getPaymentsRequest($orderId, $perPage, $page, $currency, $dateFrom, $dateTo, $updatedAfter, $updatedBefore, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayments'
     *
     * @param  string|null $orderId Find payments matching order_id (optional)
     * @param  int|null $perPage How many results to list per page between 1 and 250, defaults to 15. (optional)
     * @param  int|null $page What page to view. (optional)
     * @param  string|null $currency Find payments with currency (optional)
     * @param  string|null $dateFrom Find payments created after date_from, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $dateTo Find payments created before or until date_to, takes an iso-8601 date or datetime string (optional)
     * @param  string|null $updatedAfter Find payment updated after (optional)
     * @param  string|null $updatedBefore Find payment updated before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentsRequest($orderId = null, $perPage = null, $page = null, $currency = null, $dateFrom = null, $dateTo = null, $updatedAfter = null, $updatedBefore = null, string $contentType = self::contentTypes['getPayments'][0])
    {


        if ($perPage !== null && $perPage > 250) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PaymentsApi.getPayments, must be smaller than or equal to 250.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PaymentsApi.getPayments, must be bigger than or equal to 1.');
        }
        







        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderId,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $perPage,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateFrom,
            'date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateTo,
            'date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updatedAfter,
            'updated_after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updatedBefore,
            'updated_before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundPayment
     *
     * Refund payment
     *
     * @param  int $id Id of the payment to refund (required)
     * @param  \Pensopay\Client\Model\PaymentRefundPaymentRequest|null $paymentRefundPaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function refundPayment($id, $paymentRefundPaymentRequest = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        list($response) = $this->refundPaymentWithHttpInfo($id, $paymentRefundPaymentRequest, $contentType);
        return $response;
    }

    /**
     * Operation refundPaymentWithHttpInfo
     *
     * Refund payment
     *
     * @param  int $id Id of the payment to refund (required)
     * @param  \Pensopay\Client\Model\PaymentRefundPaymentRequest|null $paymentRefundPaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundPaymentWithHttpInfo($id, $paymentRefundPaymentRequest = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        $request = $this->refundPaymentRequest($id, $paymentRefundPaymentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation refundPaymentAsync
     *
     * Refund payment
     *
     * @param  int $id Id of the payment to refund (required)
     * @param  \Pensopay\Client\Model\PaymentRefundPaymentRequest|null $paymentRefundPaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentAsync($id, $paymentRefundPaymentRequest = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        return $this->refundPaymentAsyncWithHttpInfo($id, $paymentRefundPaymentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundPaymentAsyncWithHttpInfo
     *
     * Refund payment
     *
     * @param  int $id Id of the payment to refund (required)
     * @param  \Pensopay\Client\Model\PaymentRefundPaymentRequest|null $paymentRefundPaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentAsyncWithHttpInfo($id, $paymentRefundPaymentRequest = null, string $contentType = self::contentTypes['refundPayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->refundPaymentRequest($id, $paymentRefundPaymentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundPayment'
     *
     * @param  int $id Id of the payment to refund (required)
     * @param  \Pensopay\Client\Model\PaymentRefundPaymentRequest|null $paymentRefundPaymentRequest payment (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundPaymentRequest($id, $paymentRefundPaymentRequest = null, string $contentType = self::contentTypes['refundPayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling refundPayment'
            );
        }



        $resourcePath = '/payments/{id}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paymentRefundPaymentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paymentRefundPaymentRequest));
            } else {
                $httpBody = $paymentRefundPaymentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayment
     *
     * Update Payment
     *
     * @param  int $id Id of the payment to update (required)
     * @param  \Pensopay\Client\Model\PaymentUpdateRequest $paymentUpdateRequest payment update request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Pensopay\Client\Model\PaymentPaymentResponse
     */
    public function updatePayment($id, $paymentUpdateRequest, string $contentType = self::contentTypes['updatePayment'][0])
    {
        list($response) = $this->updatePaymentWithHttpInfo($id, $paymentUpdateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updatePaymentWithHttpInfo
     *
     * Update Payment
     *
     * @param  int $id Id of the payment to update (required)
     * @param  \Pensopay\Client\Model\PaymentUpdateRequest $paymentUpdateRequest payment update request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \Pensopay\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Pensopay\Client\Model\PaymentPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentWithHttpInfo($id, $paymentUpdateRequest, string $contentType = self::contentTypes['updatePayment'][0])
    {
        $request = $this->updatePaymentRequest($id, $paymentUpdateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Pensopay\Client\Model\PaymentPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Pensopay\Client\Model\PaymentPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePaymentAsync
     *
     * Update Payment
     *
     * @param  int $id Id of the payment to update (required)
     * @param  \Pensopay\Client\Model\PaymentUpdateRequest $paymentUpdateRequest payment update request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentAsync($id, $paymentUpdateRequest, string $contentType = self::contentTypes['updatePayment'][0])
    {
        return $this->updatePaymentAsyncWithHttpInfo($id, $paymentUpdateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentAsyncWithHttpInfo
     *
     * Update Payment
     *
     * @param  int $id Id of the payment to update (required)
     * @param  \Pensopay\Client\Model\PaymentUpdateRequest $paymentUpdateRequest payment update request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentAsyncWithHttpInfo($id, $paymentUpdateRequest, string $contentType = self::contentTypes['updatePayment'][0])
    {
        $returnType = '\Pensopay\Client\Model\PaymentPaymentResponse';
        $request = $this->updatePaymentRequest($id, $paymentUpdateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayment'
     *
     * @param  int $id Id of the payment to update (required)
     * @param  \Pensopay\Client\Model\PaymentUpdateRequest $paymentUpdateRequest payment update request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentRequest($id, $paymentUpdateRequest, string $contentType = self::contentTypes['updatePayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePayment'
            );
        }

        // verify the required parameter 'paymentUpdateRequest' is set
        if ($paymentUpdateRequest === null || (is_array($paymentUpdateRequest) && count($paymentUpdateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentUpdateRequest when calling updatePayment'
            );
        }


        $resourcePath = '/payments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paymentUpdateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paymentUpdateRequest));
            } else {
                $httpBody = $paymentUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
